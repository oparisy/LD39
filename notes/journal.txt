30/07/2017
Installation ordinateur, wifi, connexion second écran : OK, efficace (j'avais adaptateurs HDMI / DVI et câbles nécessaires)
Perte de temps sur VPN (ne fonctionne pas) et accès quickconnect NAS (capricieux) => pas d'accès à mon wiki...
Il faudra régler ça au calme (en simulant accès "externe" via tethering 4G par exemple)

Test de github.com/pinqy520/three-typescript-starter (en espérant qu'il s'agit bien du starter que j'avais identifié)
=> oui, c'est bien ça

Conseils Ben :
 * Il faut une seconde ressource (crédits / whatever) en plus de l'énergie pour rendre le gameplay intéressant
 * On ne doit pas pouvoir convertir d'une ressource à l'autre (vendre de l'énergie par exemple)
 * Ajouter une possibilité de stocker l'énergie varierait les stratégies
 * Dépenser les crédits pour construire structures
 * La pression de la ville (sous forme d'objectifs mensuels ou de pression continue) est bien
 * Eléments essentiels, à implémenter en priorité :
   * scouting
   * carte générée procéduralement (obligera le joueur à adapter ses stratégies à la carte)
   * pose de bâtiments (pas besoin de les connecter)
   * bâtiment de recherche
     => en particulier pour débloquer les types de ressources extractibles ;
        on pourrait n'avoir que le fossile initialement
  * Eléments pas indispensables pour core gameplay / jeu intéressant :
   * events
   * pylônes
   * gestion des collisions
  * Temps réel ou tour par tour : à choisir suivant facilité de codage, pas de gros impact sur gameplay

31/07/2017
Setup projet git dès le début pour gagner du temps
Prévoir à l'avenir d'encoder tout de suite les notes dans notepad++ en UTF-8 (défaut Visual Studio Code)

Premier générateur de map + structure de donnée codé ; bindind map à window.map et ajout méthode de dump
dans la console pour faciliter debug

Le reload à la volée sur modification TS marche bien, les breakpoints sur le TS aussi
(les sources mappés sont dans webpack:// > . src)

Travail sur un premier rendu de la carte
Il faut choisir des dimensions, on va considérer que tout est en mètres
Couleurs : j'utilise celles de base sur https://www.w3schools.com/colors/colors_picker.asp (permet d'avoir l'hexa facilement)

Calage caméra facilité par binding à window. Permet de taper camera.lookAt(scene.position) par exemple

Travail sur drone. Mise au point rendue pénible par le double système de coordonnées (grille de simulation + scène)

Garder un oeil sur la console JS : des conseils concernant la déprécation peuvent être affichées par THREE

Pas d'ombre drone => sol pour l'instant malgré 30mn de mise au point. Repoussé à lundi
Ajout d'une ligne drone-sol à la place pour aider à comprendre position malgré perspective

Brouillard de guerre : approche ultra minimale dans un premier temps avec simple changement de couleur face survolée

Bloqué 5mn par un bug ici : if (flownOver.explored = false)... Besoin d'un linter TypeScript!

Beaucoup de temps perdu sur mise au point CSS car les traitements css-modules de webpack interféraient,
et je n'ai pas compris comment faire réécrire mon HTML pour référencer les sélecteurs réécrits
=> comportement supprimé en enlevant le loader en "css-loader?modules" de mon webpack.config.js

J'utilise des classes CSS pour sélectionner, apparemment les ids sont déconseillés ?

Bonne doc flexbox : https://www.alsacreations.com/tuto/lire/1493-css3-flexbox-layout-module.html

Je laisse tomber le travail de layout... Trop long à mettre au point, et interactions canvas + flexbox tordus
Il faudra faire un snippet de démo au calme...
Je me suis rabattu sur une approche "en dur" (des tailles fixées dans le CSS et le JS),
tout en exploitant flexbox quand plus facile

Bilan première journée :
 * gain réel de productivité three.js en utilisant ses mécanismes "standards"
 * CSS / HTML : pas suffisament rodé, préparer snippets à l'avance et limiter besoins durant LD
 * jeu plus avancé qu'habituellement à ce stade


Seconde journée

Travail UI facilité par HTML/CSS maintenant que le gros de l'interface est calé

J'anticipe des difficultés dans le positionnement des bâtiments si je déforme la géométrie du plan
pour créer des reliefs. On est trop dépendants de sa structure
=> il aurait fallu créer et maintenir la géométrie nous-mêmes dès le début

Le mécanisme de BrowserSync est vraiment pratique, jamais besoin de relancer de build à la main

Du temps passé sur l'implémentation des règles, mais gratifiant et je ne vois pas comment raccourcir

Jeu essentiellement réalisé à 16h... J'hésite sur l'affichage des gameover / victoires

La publication via webpack marche bien ! Jeu testé sous Edge et Chrome
Je ne perd pas de temps sur la "minification" ; mon starter ne la propose pas

Publication GitHub : Settings > GitHub Pages > Source: /docs
Configuration webpack ajustée en circonstance
Petite frayeur à la publication : il faut attendre quelques minutes pour que GitHub prenne en compte le commit

Création page du jeu sur ldjam.com : il faut créer un nouveau compte, homonyme (rumeurs de portage des jeux)

Pour le dialogue utilisateur, finalement : un overlay HTML.
Permet de garder le jeu inactif en transparence et de contrôler facilement le layout.

Pas de chance (?), github a des soucis de serveurs (pour la publication des pages en particulier)

Objectifs priorisés atteints avant 22h30 !
